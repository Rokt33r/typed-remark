import { gh } from '../util/gh'
import { shaEnd } from '../util/shaEnd'
import { locatorFactory } from '../util/regexLocator'
import { abbreviate } from '../util/abbreviate'
import { Node } from 'typed-unist'
import { TokenizeMethod, Eat } from 'typed-remark-parse'
import { RemarkGithubParser } from '..'
import { Link, InlineCode } from 'typed-mdast'

/**
 * Tokenise a hash.
 */
export const hash: TokenizeMethod = function (this: RemarkGithubParser, eat: Eat, value: string, silent?: boolean): Node | boolean | void {
  const self = this
  const index = shaEnd(value, 0)
  let subvalue
  let href
  let now
  let node
  let exit

  if (index === -1) {
    return
  }

  subvalue = value.slice(0, index)

  if (isBlacklisted(subvalue)) {
    return
  }

  /* istanbul ignore if - maybe used by plug-ins */
  if (silent) {
    return true
  }

  href = gh(this.githubRepo) + 'commit/' + subvalue
  now = eat.now()
  exit = self.enterLink()

  node = eat(subvalue)({
    type: 'link',
    title: null,
    url: href,
    children: self.tokenizeInline(subvalue, now),
  } as Node) as Link

  exit()

  node.children = [{
    type: 'inlineCode',
    value: abbreviate(subvalue),
    position: node.children[0].position,
  } as InlineCode]

  return node
} as TokenizeMethod
hash.locator = locatorFactory(/\b[a-f0-9]{7,40}\b/gi)
hash.notInLink = true

/* Blacklist of SHAs which are also valid words.
 *
 * GitHub allows abbreviating SHAs up to 7 characters.
 * These are ignored in text because they might just be
 * ment as normal words.  If youâ€™d like these to link to
 * their SHAs, use more than 7 characters.
 *
 * Generated by:
 *
 *     egrep -i "^[a-f0-9]{7,}$" /usr/share/dict/words
 */
const BLACKLIST = [
  'deedeed',
  'fabaceae',
]

/* Check if a value is a SHA. */
function isBlacklisted (sha: string) {
  return BLACKLIST.indexOf(sha.toLowerCase()) !== -1
}
